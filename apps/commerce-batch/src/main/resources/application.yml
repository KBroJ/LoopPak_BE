server:
    shutdown: graceful
    tomcat:
        threads:
            max: 200
            min-spare: 10
        connection-timeout: 1m
        max-connections: 8192
        accept-count: 100
        keep-alive-timeout: 60s
    max-http-request-header-size: 8KB

logging:
    level:
        org.springframework.batch: DEBUG
        com.loopers: DEBUG

# =============================================================================
# Spring 기본 설정
# =============================================================================
spring:
    main:
        web-application-type: servlet  # 다른 앱들과 동일
    application:
        name: commerce-batch
    profiles:
        active: local
    config:
        import:
            - jpa.yml              # 다른 앱들과 공통
            - redis.yml            # 나중에 랭킹 비교용으로 필요할 수 있음
            - logging.yml          # 다른 앱들과 공통
            - monitoring.yml       # 다른 앱들과 공통
    jackson:
        time-zone: Asia/Seoul      # api와 동일

    # Spring Batch 전용 설정 (다른 앱에는 없는 부분)
    batch:
        job:
            enabled: true         # Job 수동 실행
            name: helloWorldJob   # 시작할 때 자동으로 이 Job 실행
        jdbc:
            initialize-schema: always  # 배치 메타데이터 테이블 자동 생성

# =============================================================================
# 랭킹 가중치 설정
# =============================================================================
ranking:
    weight:
        like: 3.0      # 좋아요 가중치
        sales: 2.0     # 판매량 가중치
        view: 1.0      # 조회수 가중치

# =============================================================================
# 배치 스케줄링 설정 (새로 추가된 부분)
# =============================================================================
batch:
    scheduler:
        # 스케줄러 전체 활성화/비활성화
        # true: 자동 스케줄링 활성화 (운영 환경)
        # false: 수동 실행만 가능 (개발/테스트 환경)
        enabled: false  # 기본값: 비활성화 (안전)

        # 주간 랭킹 배치 설정
        weekly:
            # Cron 표현식: "초 분 시 일 월 요일"
            # 매주 월요일 새벽 3시 실행 (지난 주 일요일까지 데이터 집계)
            cron: "0 0 3 * * MON"

        # 월간 랭킹 배치 설정
        monthly:
            # 매월 1일 새벽 4시 실행 (지난 달 전체 데이터 집계)
            cron: "0 0 4 1 * *"


# =============================================================================
# 개발/테스트 환경 설정 (local, test)
# =============================================================================
---
spring:
    config:
        activate:
            on-profile: local, test

# collector 스타일 - 포트 분리
server:
    port: 8086

management:
    server:
        port: 8087

# 개발/테스트 환경 배치 스케줄링 설정
batch:
    scheduler:
        # 개발/테스트 환경에서는 스케줄러 비활성화 (수동 실행으로 테스트)
        enabled: false
        weekly:
            # 개발 시 테스트용: 2분마다 실행 (빠른 확인용)
            cron: "0 */2 * * * *"
        monthly:
            # 개발 시 테스트용: 3분마다 실행
            cron: "0 */3 * * * *"

# =============================================================================
# 개발 환경 설정 (dev)
# =============================================================================
---
spring:
    config:
        activate:
            on-profile: dev

# 개발 환경에서도 스케줄러 비활성화 (필요시 수동 활성화)
batch:
    scheduler:
        enabled: false
        weekly:
            cron: "0 */5 * * * *"  # 5분마다 (개발 서버 테스트용)
        monthly:
            cron: "0 */10 * * * *" # 10분마다

# =============================================================================
# QA 환경 설정 (qa)
# =============================================================================
---
spring:
    config:
        activate:
            on-profile: qa

# QA 환경에서는 하루에 여러 번 실행하여 테스트
batch:
    scheduler:
        enabled: true  # QA에서는 활성화하여 스케줄링 테스트
        weekly:
            cron: "0 0 */6 * * *"  # 6시간마다 (QA 테스트용)
        monthly:
            cron: "0 0 */12 * * *" # 12시간마다 (QA 테스트용)


# =============================================================================
# 운영 환경 설정 (prd)
# =============================================================================
---
spring:
    config:
        activate:
            on-profile: prd

# 배치 전용 - API docs 비활성화 (prd 환경에서)
management:
    endpoints:
        web:
            exposure:
                include: health, info, metrics

# 운영 환경 배치 스케줄링 설정
batch:
    scheduler:
        # 운영에서는 스케줄러 활성화
        enabled: true
        weekly:
            # 운영: 매주 월요일 새벽 3시
            cron: "0 0 3 * * MON"
        monthly:
            # 운영: 매월 1일 새벽 4시
            cron: "0 0 4 1 * *"

# 운영 환경 로깅 최적화
logging:
    level:
        com.loopers.application.batch: INFO
        org.springframework.batch: WARN
        org.springframework.scheduling: INFO